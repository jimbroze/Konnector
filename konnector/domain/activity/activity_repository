from abc import ABC, abstractmethod
from typing import Optional

from . import Activity


class ActivityRepository(ABC):
    """
    A class to represent a productivity platform and access its API.

    ...

    Attributes
    ----------
    name : str =  ""
        What the platform is called

    """

    name = ""

    @abstractmethod
    def get_activities(self, list_name: Optional[str] = None) -> list[Activity]:
        pass

    @abstractmethod
    def get_activity(self, activity: Activity) -> Activity:
        pass

    @abstractmethod
    def create_activity(self, activity: Activity, list_name: Optional[str] = None) -> Activity:
        pass

    @abstractmethod
    def update_activity(self, activity: Activity) -> Activity:
        pass

    @abstractmethod
    def delete_activity(self, activity: Activity) -> bool:
        pass